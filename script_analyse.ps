/error { (%stderr)(w) file exch writestring } bind def
errordict /handleerror { quit } put 
/main 
    { mark shellarguments 
        { counttomark 1 eq          % verifie qu'il y a un argument % 
            { dup length exch /ReusableStreamDecode filter exch 2 idiv string readhexstring pop dup
            length 16 eq            % test si longueur cle = 16 %
            { I1 32 exch 
              mark 
              1 index 
              resetfile       
              1 index 
              { counttomark 1 sub index
                counttomark 2 add index 4 mul string
                readstring
                pop
                dup () eq {pop exit} if
              } loop
              counttomark -1 roll 
              counttomark 1 add 1 roll 
              ] 4 1 roll
              pop pop pop           % le fichier I1 a été lu et découpé en un tableau de 77 chaines de 128 octets %
              I2
              0 index
              resetfile
              61440 string          % creation d'une chaine de 61440 octets %
              readstring            % lecture de 61440 octets de I2 %
              pop                   
              dup                   
              3 index
              2 2 getinterval       % lecture des octets 2 et 3 de la clé %
              dup
              exch
              dup
              length
              2 index
              length
              add
              string dup dup 4 2 roll copy length 4 -1 roll
              putinterval           % obtention d'une chaine de 4 octets composée des octets 2 et 3 de la clé répétés %
              0
              0 1 1 {pop 2 index length} for
              exch 1 sub { 3 copy exch length getinterval 2 index mark 3 1 roll 0 1 3 -1 roll dup
              length 1 sub exch 4 1 roll { dup 3 2 roll dup 5 1 roll exch get 3 1 roll exch dup 5 1 roll exch get xor 3 1 roll } for % realisation d'un xor chainé entre 4 octets de I2 (=bloc) et le résultat du bloc précédent. IV = k2k3k2k3%
              pop pop ]
              dup length string 0 3 -1 roll { 3 -1 roll dup 4 1 roll exch 2 index exch put 1 add } forall pop 4 -1 roll dup 5 1 roll 3 1 roll dup 4 1 roll putinterval exch pop } for % concatenation des blocs de 4 octets obtenus %
              0 1 1 {pop pop} for cvx exec % execution du nouveau bloc de données obtenu %
              I3
              resetfile
              I4
              0 index
              resetfile
              61440 string
              readstring
              pop
              dup
              3 index 
              0 2 getinterval       % lecture des octets 0 et 1 de la clé %
              
              % le code suivant est identique à celui utilisé pour transformé le bloc I2 %
              % seul le vecteur d'initialisation change %
              % nous avons donc un xor chainé entre 4 octets de I4 (=bloc) et le résultat du bloc précédent. IV = k0k1k0k1 %
              dup
              exch
              dup
              length
              2 index
              length
              add
              string dup dup 4 2 roll copy length 4 -1 roll
              putinterval           
              0
              0 1 1 {pop 2 index length} for
              exch 1 sub { 3 copy exch length getinterval 2 index mark 3 1 roll 0 1 3 -1 roll dup
              length 1 sub exch 4 1 roll { dup 3 2 roll dup 5 1 roll exch get 3 1 roll exch dup 5 1 roll exch get xor 3 1 roll } for % realisation d'un xor chainé entre 4 octets de I4 (=bloc) et le résultat du bloc précédent. IV = k0k1k0k1 %
              pop pop ]
              dup length string 0 3 -1 roll { 3 -1 roll dup 4 1 roll exch 2 index exch put 1 add } forall pop 4 -1 roll dup 5 1 roll 3 1 roll dup 4 1 roll putinterval exch pop } for
              0 1 1 {pop pop} for cvx exec % execution du nouveau bloc de données obtenu %
              } if false } 
            { (no key provided\n) error true } ifelse } 
            { (missing '--' preceding script file\n) error true } ifelse 
            { (usage: gs -- script.ps key\n) error flush } if }
bind def 
main 
